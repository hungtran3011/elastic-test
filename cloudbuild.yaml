steps:
  # Build the custom Elasticsearch Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${PROJECT_ID}/custom-elasticsearch:${COMMIT_SHA}'
      - '-t'
      - 'gcr.io/${PROJECT_ID}/custom-elasticsearch:latest'
      - './custom-elastic'

  # Push the Docker image to Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/${PROJECT_ID}/custom-elasticsearch:${COMMIT_SHA}'

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/${PROJECT_ID}/custom-elasticsearch:latest'

  # Update the Kubernetes manifest with the new image
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: /bin/bash
    args:
      - '-c'
      - |
        sed -i 's|gcr.io/${PROJECT_ID}/custom-elasticsearch:.*|gcr.io/${PROJECT_ID}/custom-elasticsearch:${COMMIT_SHA}|g' k8s-manifests.yaml

  # Get GKE cluster credentials
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - '${_CLUSTER_NAME}'
      - '--region=${_REGION}'

  # Deploy to GKE
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'apply'
      - '-f'
      - 'k8s-manifests.yaml'

  # Wait for deployments to be ready
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'wait'
      - '--for=condition=available'
      - '--timeout=600s'
      - 'deployment/elasticsearch'

  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'wait'
      - '--for=condition=available'
      - '--timeout=300s'
      - 'deployment/kibana'

# Store the build artifacts
images:
  - 'gcr.io/${PROJECT_ID}/custom-elasticsearch:${COMMIT_SHA}'
  - 'gcr.io/${PROJECT_ID}/custom-elasticsearch:latest'

# Substitution variables
substitutions:
  _CLUSTER_NAME: elasticsearch-cluster  # Default cluster name
  _REGION: us-central1                  # Default region

# Options for the build
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'